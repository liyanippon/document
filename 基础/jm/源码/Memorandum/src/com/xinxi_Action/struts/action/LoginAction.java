/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xinxi_Action.struts.action;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.xinxi_Action.struts.form.LoginForm;
import com.xinxi_Action.struts.session.SessionService;
import com.xinxi_Action.struts.session.StaticName;
import com.web_interface.LoginServiceInterface;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * MyEclipse Struts Creation date: 11-27-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/login" name="loginForm" input="/login.jsp"
 *                scope="request"
 * @struts.action-forward name="index" path="/index.jsp"
 * @struts.action-forward name="failed" path="/failed.jsp"
 */
public class LoginAction extends Action {

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	private static final Log log = LogFactory.getLog(LoginAction.class);

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LoginForm loginForm = (LoginForm) form;
		HttpSession session = request.getSession();
		// 在登陆过程中先将session清除,避免进入网站后,关闭网页使用login.do来访问
		session.removeAttribute("login");
		// 判断用户是否曾经登陆过,或者关闭网页从新访问登陆后的页面
		SessionService sessionservice = new SessionService();
		boolean booleanUser = sessionservice.SessionServiceLogin(session,
				StaticName.USERLOGIN = (String) session.getAttribute("login"));
		String time=String.valueOf(new Date().getTime());
		System.out.println("time:"+time);
		if (booleanUser) {
			// 用户成功
			LoginServiceInterface fileService = getLogin();
			if (fileService.loginCheck(loginForm)) {
				log.fatal("LOG测试");
				log.fatal(loginForm.getUserName() + "登陆成功");
				Object user = (Object) loginForm.getUserName();
				session.setAttribute("login", user);
				
				return mapping.findForward("news");
				
//				return mapping.findForward("index");
			} else {
				// 根据返回值决定页面转向,true－跳转到成功页面；false－跳转到错误页面
				return mapping.findForward("failed");
			}
		} else {
			return mapping.findForward("fenyecuowu");
		}
	}

	private LoginServiceInterface getLogin() {
		AbstractApplicationContext appContext = (AbstractApplicationContext) WebApplicationContextUtils.getWebApplicationContext(this.getServlet().getServletContext());
		return (LoginServiceInterface) appContext.getBean("loginService");
	}
}
