/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xinxi_Action.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.web_interface.fenye.FenyeSelectInterface;
import java.util.*;
import com.xinxi_Action.struts.session.*;

/**
 * MyEclipse Struts Creation date: 11-28-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class OlympicgamesFenyelistAction extends DispatchAction {

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward OlympicGamesBean
	 */
	private static final Log log = LogFactory
			.getLog(OlympicgamesFenyelistAction.class);

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		log.debug("---OlympicgamesFenyelistAction---");
		String id = request.getParameter("id");
		// 分页算法公式Bean
		Pager pager = new Pager();
		// 设置session判断用户是否成功登陆或者关闭网页后复制url来进行访问
		// 测试页面跳转 成功=OK
		HttpSession session = request.getSession();
		// 分页的next,previous,first=第一页,pageCount最后一页
		String string_next = request.getParameter("next");
		String string_previous = request.getParameter("previous");
		String pageCount = request.getParameter("pageCount");
		// 判断用户是否成功登陆
		SessionService sessionservice = new SessionService();
		boolean booleanUser = sessionservice.SessionService(session,
				StaticName.USERLOGIN = (String) session.getAttribute("login"));

		// 测试SQL数据所用的时间
		StaticName.SQL_DATE_CHESHI_GO = StaticName.SQL_CESHI.getTime();
		System.out.println("SQL测试语句开始时间:" + StaticName.SQL_DATE_CHESHI_GO);
		// 成功登陆
		if (booleanUser) {
			log.fatal("用户成功登陆，准备进入分页状态");
			// 设置DAO和service的关系
			FenyeSelectInterface fenyeSelectInterface = getOlympicGamesFenyeSelectInterface();
			// 判断分页的next,previous是否为空
			boolean boolean_next_previous = sessionservice
					.Requrest_Next_PREVIOUS(string_next, string_previous,
							pageCount);
			// 用户第一次进分页页面
			if (!boolean_next_previous) {
				try {
					log.fatal("首次进入分页状态");
					List fenye = fenyeSelectInterface
							.OlympicgamesFenyeFindSelectAll(
									StaticName.FIRST_RESULT,
									StaticName.MAX_RESULTS,
									StaticName.olympicgames_FENYESQL_SHUJU);
					// --------------------------------------------------------------------
					// 查询出分页需要的数据{默认数据库每页显示20条}
					Integer count = fenyeSelectInterface
							.OlympicgamesFenyeFindSelectCount(StaticName.olympicgames_FENYESQL_COUNT);
					// 设置默认的上页下页
					List sx = pager.Pager_sx(count, StaticName.FIRST_RESULT,
							StaticName.MAX_RESULTS);
					request.setAttribute("list", sx);
					request.setAttribute("fenye", fenye);
				} catch (Exception re) {
					log.error("首次分页状态:error");
				}
				// 测试SQL数据所用的时间
				StaticName.SQL_DATE_CHESHI_EXIT = StaticName.SQL_CESHI_01
						.getTime();
				request
						.setAttribute(
								"sqlceshi",
								(StaticName.SQL_DATE_CHESHI_GO - StaticName.SQL_DATE_CHESHI_EXIT) / 1000);

				// 测试页面跳转是否成功
				Object user = (Object) StaticName.FENYE_CESHI.toString();
				request.setAttribute("ceshi", user);
				System.out.println("SQL测试语句结束时间:"
						+ StaticName.SQL_DATE_CHESHI_EXIT);
				System.out
						.println("SQL访问时间测试结果:"
								+ (StaticName.SQL_DATE_CHESHI_GO - StaticName.SQL_DATE_CHESHI_EXIT)
								/ 300 + "秒");
				if (id.equals("okdfe4s64f4n456e4f46")) {
					return mapping.findForward("olympicgamesfenyeok");
				}
				return mapping.findForward("olympicgamesfenyeud");

			} else {
				try {
					log.fatal("进入翻页状态");
					// 将next,previous转换成Integer类型(分页中)
					StaticName.RequrestNext_Previous_Integer = sessionservice
							.RequrestNext_Previous_Integer(string_next,
									string_previous, pageCount);
					// next的SQL算法公式
					List fenye = fenyeSelectInterface
							.OlympicgamesFenyeFindSelectAll(
									StaticName.FIRST_XIAYIYE = StaticName.RequrestNext_Previous_Integer
											* StaticName.MAX_RESULTS - 20,
									StaticName.MAX_RESULTS,
									StaticName.olympicgames_FENYESQL_SHUJU);
					// next的SQL-count(*)的集合
					Integer count = fenyeSelectInterface
							.OlympicgamesFenyeFindSelectCount(StaticName.olympicgames_FENYESQL_COUNT);
					// list=next的SQL-count(*)的集合-pager bean的具体返回页面值(算法)
					List sx = pager
							.Pager_sx(
									count,
									StaticName.FIRST_XIAYIYE = StaticName.RequrestNext_Previous_Integer
											* StaticName.MAX_RESULTS - 19,
									StaticName.MAX_RESULTS);
					request.setAttribute("list", sx);
					request.setAttribute("fenye", fenye);
					// 测试SQL数据所用的时间
					StaticName.SQL_DATE_CHESHI_EXIT = StaticName.SQL_CESHI_01
							.getTime();
					request
							.setAttribute(
									"sqlceshi",
									(StaticName.SQL_DATE_CHESHI_GO - StaticName.SQL_DATE_CHESHI_EXIT) / 1000);
				} catch (Exception ex) {
					log.error("进入翻页状态:error");
				}
				// 测试页面跳转是否成功
				Object user = (Object) StaticName.FENYE_CESHI.toString();
				request.setAttribute("ceshi", user);
				System.out.println("分页过程中SQL测试语句结束时间:"
						+ StaticName.SQL_DATE_CHESHI_EXIT);
				System.out
						.println("SQL访问时间测试结果:"
								+ (StaticName.SQL_DATE_CHESHI_GO - StaticName.SQL_DATE_CHESHI_EXIT)
								/ 300 + "秒");
				if (id.equals("okdfe4s64f4n456e4f46")) {
					return mapping.findForward("olympicgamesfenyeok");
				}
				return mapping.findForward("olympicgamesfenyeud");

			}
		}
		// 失败的登陆
		else {
			return mapping.findForward("fenyecuowu");
		}
	}

	// ApplicationContext的设置
	private FenyeSelectInterface getOlympicGamesFenyeSelectInterface() {
		ApplicationContext appContext = WebApplicationContextUtils
				.getWebApplicationContext(this.getServlet().getServletContext());
		return (FenyeSelectInterface) appContext.getBean("fenyeService");
	}
}
